package main

import (
	"context"
	"fmt"
	"time"
)

// Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
//
// Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
// Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
// Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
// It can be verified that T285 = P165 = H143 = 40755.
//
// Find the next triangle number that is also pentagonal and hexagonal.

type Manager struct {
	Type    string
	Count   int
	Current int
	c       chan int
	formula func(int) int
}

func NewTriangle() *Manager {
	return &Manager{
		Type:    "Triangle",
		formula: func(x int) int { return x * (x + 1) / 2 },
	}
}

func NewPentagonal() *Manager {
	return &Manager{
		Type:    "Pentagonal",
		formula: func(x int) int { return x * (3*x - 1) / 2 },
	}
}

func NewHexagonal() *Manager {
	return &Manager{
		Type:    "Hexagonal",
		formula: func(x int) int { return x * (2*x - 1) },
	}
}

func (t *Manager) Gen(ctx context.Context) <-chan int {
	if t.c == nil {
		t.c = make(chan int, 0)

		go func() {
			for {
				val := t.formula(t.Count + 1)
				select {
				case <-ctx.Done():
					close(t.c)
					return
				case t.c <- val:
					t.Current = val
					t.Count++
				}
			}
		}()
	}

	return t.c
}

func Lowest(a, b, c int) int {
	if a == b && b == c {
		return -1
	}
	if a <= b && a <= c {
		return 0
	}
	if b <= a && b <= c {
		return 1
	}
	if c <= a && c <= b {
		return 2
	}

	return -1
}

func NextMatch(ctx context.Context) <-chan int {
	ch := make(chan int, 0)
	t := NewTriangle()
	p := NewPentagonal()
	h := NewHexagonal()

	var a, b, c int

	go func() {
		for {
			switch Lowest(a, b, c) {
			case -1:
				ch <- a
				c = <-h.Gen(ctx)
			case 0:
				a = <-t.Gen(ctx)
			case 1:
				b = <-p.Gen(ctx)
			case 2:
				c = <-h.Gen(ctx)
			}
		}
		close(ch)
	}()

	return ch
}

func timeIt(start time.Time) {
	elapsed := time.Since(start)
	fmt.Printf("Completed in %s\n", elapsed)
}

func main() {
	defer timeIt(time.Now())
	ctx := context.Background()
	for val := range NextMatch(ctx) {
		fmt.Println(val)
		if val > 40755 {
			break
		}
	}
}
